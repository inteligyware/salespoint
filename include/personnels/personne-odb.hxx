// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef PERSONNE_ODB_HXX
#define PERSONNE_ODB_HXX

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/pgsql/qstring-traits.hxx>
#include <odb/qt/basic/pgsql/qbyte-array-traits.hxx>
#include <odb/qt/basic/pgsql/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/pgsql/qdate-traits.hxx>
#include <odb/qt/date-time/pgsql/qtime-traits.hxx>
#include <odb/qt/date-time/pgsql/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "personne.hxx"

#include <memory>
#include <cstddef>
#include <string>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/polymorphic-info.hxx>
#include <odb/result.hxx>
#include <odb/polymorphic-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Personne
  //
  template <>
  struct class_traits< ::Personne >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Personne >
  {
    public:
    typedef ::Personne object_type;
    typedef ::QSharedPointer< ::Personne > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::Personne root_type;
    typedef ::std::string discriminator_type;
    typedef polymorphic_map<object_type> map_type;
    typedef polymorphic_concrete_info<object_type> info_type;
    typedef polymorphic_abstract_info<object_type> abstract_info_type;

    static const std::size_t depth = 1UL;

    typedef ::quint32 id_type;

    static const bool auto_id = true;

    static const bool abstract = true;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // Personne
  //
  template <typename A>
  struct query_columns< ::Personne, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::quint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    id_type_;

    static const id_type_ id;

    // typeid_
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    typeid__type_;

    static const typeid__type_ typeid_;

    // noms
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    noms_type_;

    static const noms_type_ noms;

    // prenoms
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    prenoms_type_;

    static const prenoms_type_ prenoms;

    // adresse
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    adresse_type_;

    static const adresse_type_ adresse;

    // tel
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    tel_type_;

    static const tel_type_ tel;

    // email
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    email_type_;

    static const email_type_ email;

    // cni
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    cni_type_;

    static const cni_type_ cni;
  };

  template <typename A>
  const typename query_columns< ::Personne, id_pgsql, A >::id_type_
  query_columns< ::Personne, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::Personne, id_pgsql, A >::typeid__type_
  query_columns< ::Personne, id_pgsql, A >::
  typeid_ (A::table_name, "\"typeid\"", 0);

  template <typename A>
  const typename query_columns< ::Personne, id_pgsql, A >::noms_type_
  query_columns< ::Personne, id_pgsql, A >::
  noms (A::table_name, "\"noms\"", 0);

  template <typename A>
  const typename query_columns< ::Personne, id_pgsql, A >::prenoms_type_
  query_columns< ::Personne, id_pgsql, A >::
  prenoms (A::table_name, "\"prenoms\"", 0);

  template <typename A>
  const typename query_columns< ::Personne, id_pgsql, A >::adresse_type_
  query_columns< ::Personne, id_pgsql, A >::
  adresse (A::table_name, "\"adresse\"", 0);

  template <typename A>
  const typename query_columns< ::Personne, id_pgsql, A >::tel_type_
  query_columns< ::Personne, id_pgsql, A >::
  tel (A::table_name, "\"tel\"", 0);

  template <typename A>
  const typename query_columns< ::Personne, id_pgsql, A >::email_type_
  query_columns< ::Personne, id_pgsql, A >::
  email (A::table_name, "\"email\"", 0);

  template <typename A>
  const typename query_columns< ::Personne, id_pgsql, A >::cni_type_
  query_columns< ::Personne, id_pgsql, A >::
  cni (A::table_name, "\"cni\"", 0);

  template <typename A>
  struct pointer_query_columns< ::Personne, id_pgsql, A >:
    query_columns< ::Personne, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::Personne, id_pgsql >:
    public access::object_traits< ::Personne >
  {
    public:
    typedef object_traits_impl<root_type, id_pgsql> root_traits;

    struct discriminator_image_type
    {
      details::buffer discriminator_value;
      std::size_t discriminator_size;
      bool discriminator_null;

      std::size_t version;
    };

    struct id_image_type
    {
      int id_value;
      bool id_null;

      std::size_t version;
    };

    static map_type* map;
    static const abstract_info_type info;

    struct image_type
    {
      // id_
      //
      int id_value;
      bool id_null;

      // typeid_
      //
      details::buffer typeid_value;
      std::size_t typeid_size;
      bool typeid_null;

      // noms_
      //
      details::buffer noms_value;
      std::size_t noms_size;
      bool noms_null;

      // prenoms_
      //
      details::buffer prenoms_value;
      std::size_t prenoms_size;
      bool prenoms_null;

      // adresse_
      //
      details::buffer adresse_value;
      std::size_t adresse_size;
      bool adresse_null;

      // tel_
      //
      details::buffer tel_value;
      std::size_t tel_size;
      bool tel_null;

      // email_
      //
      details::buffer email_value;
      std::size_t email_size;
      bool email_null;

      // cni_
      //
      details::buffer cni_value;
      std::size_t cni_size;
      bool cni_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static discriminator_type
    discriminator (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    pgsql::polymorphic_root_object_statements<object_type>
    statements_type;

    typedef statements_type root_statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 1UL;
    static const std::size_t managed_optimistic_column_count = 0UL;
    static const std::size_t discriminator_column_count = 1UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char find_discriminator_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char find_discriminator_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);

    static void
    discriminator_ (statements_type&,
                    const id_type&,
                    discriminator_type*);
  };

  template <>
  class access::object_traits_impl< ::Personne, id_common >:
    public access::object_traits_impl< ::Personne, id_pgsql >
  {
  };

  // Personne
  //
}

#include "personne-odb.ixx"

#include <odb/post.hxx>

#endif // PERSONNE_ODB_HXX
