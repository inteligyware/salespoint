// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef PRODUIT_ODB_HXX
#define PRODUIT_ODB_HXX

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/pgsql/qstring-traits.hxx>
#include <odb/qt/basic/pgsql/qbyte-array-traits.hxx>
#include <odb/qt/basic/pgsql/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/pgsql/qdate-traits.hxx>
#include <odb/qt/date-time/pgsql/qtime-traits.hxx>
#include <odb/qt/date-time/pgsql/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
#include <QtCore/QSharedPointer>


//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "produit.hxx"

#include "emballage-odb.hxx"
#include "fournisseur-odb.hxx"
#include "histprix-odb.hxx"
#include "prixfourn-odb.hxx"
#include "tonnage-odb.hxx"

#include <memory>
#include <cstddef>
#include <string>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/polymorphic-info.hxx>
#include <odb/result.hxx>
#include <odb/polymorphic-object-result.hxx>
#include <odb/view-image.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Produit
  //
  template <>
  struct class_traits< ::Produit >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Produit >
  {
    public:
    typedef ::Produit object_type;
    typedef ::QSharedPointer< ::Produit > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::Produit root_type;
    typedef ::std::string discriminator_type;
    typedef polymorphic_map<object_type> map_type;
    typedef polymorphic_concrete_info<object_type> info_type;
    typedef polymorphic_abstract_info<object_type> abstract_info_type;

    static const std::size_t depth = 1UL;

    typedef ::ulong id_type;

    static const bool auto_id = true;

    static const bool abstract = true;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DBViewProduits
  //
  template <>
  struct class_traits< ::DBViewProduits >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::DBViewProduits >
  {
    public:
    typedef ::DBViewProduits view_type;
    typedef ::QSharedPointer< ::DBViewProduits > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // ViewProduit
  //
  template <>
  struct class_traits< ::ViewProduit >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::ViewProduit >
  {
    public:
    typedef ::ViewProduit view_type;
    typedef ::QSharedPointer< ::ViewProduit > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // Produit
  //
  template <typename A>
  struct pointer_query_columns< ::Produit, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // typeid_
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    typeid__type_;

    static const typeid__type_ typeid_;

    // libele
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    libele_type_;

    static const libele_type_ libele;

    // codebare
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    codebare_type_;

    static const codebare_type_ codebare;

    // image_path
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    image_path_type_;

    static const image_path_type_ image_path;

    // prix_vente
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::quint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    prix_vente_type_;

    static const prix_vente_type_ prix_vente;

    // prix_achat_moy
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::qreal,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    prix_achat_moy_type_;

    static const prix_achat_moy_type_ prix_achat_moy;

    // remise
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    remise_type_;

    static const remise_type_ remise;

    // qte_colise
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    qte_colise_type_;

    static const qte_colise_type_ qte_colise;

    // qte_gros
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::quint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    qte_gros_type_;

    static const qte_gros_type_ qte_gros;

    // qte_details
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::quint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    qte_details_type_;

    static const qte_details_type_ qte_details;

    // parent
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    parent_type_;

    static const parent_type_ parent;
  };

  template <typename A>
  const typename pointer_query_columns< ::Produit, id_pgsql, A >::id_type_
  pointer_query_columns< ::Produit, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Produit, id_pgsql, A >::typeid__type_
  pointer_query_columns< ::Produit, id_pgsql, A >::
  typeid_ (A::table_name, "\"typeid\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Produit, id_pgsql, A >::libele_type_
  pointer_query_columns< ::Produit, id_pgsql, A >::
  libele (A::table_name, "\"libele\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Produit, id_pgsql, A >::codebare_type_
  pointer_query_columns< ::Produit, id_pgsql, A >::
  codebare (A::table_name, "\"codebare\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Produit, id_pgsql, A >::image_path_type_
  pointer_query_columns< ::Produit, id_pgsql, A >::
  image_path (A::table_name, "\"image_path\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Produit, id_pgsql, A >::prix_vente_type_
  pointer_query_columns< ::Produit, id_pgsql, A >::
  prix_vente (A::table_name, "\"prix_vente\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Produit, id_pgsql, A >::prix_achat_moy_type_
  pointer_query_columns< ::Produit, id_pgsql, A >::
  prix_achat_moy (A::table_name, "\"prix_achat_moy\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Produit, id_pgsql, A >::remise_type_
  pointer_query_columns< ::Produit, id_pgsql, A >::
  remise (A::table_name, "\"remise\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Produit, id_pgsql, A >::qte_colise_type_
  pointer_query_columns< ::Produit, id_pgsql, A >::
  qte_colise (A::table_name, "\"qte_colise\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Produit, id_pgsql, A >::qte_gros_type_
  pointer_query_columns< ::Produit, id_pgsql, A >::
  qte_gros (A::table_name, "\"qte_gros\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Produit, id_pgsql, A >::qte_details_type_
  pointer_query_columns< ::Produit, id_pgsql, A >::
  qte_details (A::table_name, "\"qte_details\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Produit, id_pgsql, A >::parent_type_
  pointer_query_columns< ::Produit, id_pgsql, A >::
  parent (A::table_name, "\"parent\"", 0);

  template <>
  class access::object_traits_impl< ::Produit, id_pgsql >:
    public access::object_traits< ::Produit >
  {
    public:
    typedef object_traits_impl<root_type, id_pgsql> root_traits;

    struct discriminator_image_type
    {
      details::buffer discriminator_value;
      std::size_t discriminator_size;
      bool discriminator_null;

      std::size_t version;
    };

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static map_type* map;
    static const abstract_info_type info;

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // typeid_
      //
      details::buffer typeid_value;
      std::size_t typeid_size;
      bool typeid_null;

      // libele_
      //
      details::buffer libele_value;
      std::size_t libele_size;
      bool libele_null;

      // codebare_
      //
      details::buffer codebare_value;
      std::size_t codebare_size;
      bool codebare_null;

      // image_path_
      //
      details::buffer image_path_value;
      std::size_t image_path_size;
      bool image_path_null;

      // prix_vente_
      //
      long long prix_vente_value;
      bool prix_vente_null;

      // prix_achat_moy_
      //
      double prix_achat_moy_value;
      bool prix_achat_moy_null;

      // remise_
      //
      float remise_value;
      bool remise_null;

      // qte_colise_
      //
      float qte_colise_value;
      bool qte_colise_null;

      // qte_gros_
      //
      int qte_gros_value;
      bool qte_gros_null;

      // qte_details_
      //
      int qte_details_value;
      bool qte_details_null;

      // parent_
      //
      long long parent_value;
      bool parent_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // children_
    //
    struct children_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::QVector< ::QLazyWeakPointer< ::Produit > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< children_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    // prixfourns_
    //
    struct prixfourns_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::odb::vector< ::QLazyWeakPointer< ::PrixFourn > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< prixfourns_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    // tonnages_
    //
    struct tonnages_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::odb::vector< ::QLazyWeakPointer< ::Tonnage > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< tonnages_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        int value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    // hist_prixs_
    //
    struct hist_prixs_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::odb::vector< ::QLazyWeakPointer< ::HistPrix > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< hist_prixs_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        int value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    struct parent_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static discriminator_type
    discriminator (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    pgsql::polymorphic_root_object_statements<object_type>
    statements_type;

    typedef statements_type root_statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 12UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 1UL;
    static const std::size_t managed_optimistic_column_count = 0UL;
    static const std::size_t discriminator_column_count = 1UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char find_discriminator_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char find_discriminator_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);

    static void
    discriminator_ (statements_type&,
                    const id_type&,
                    discriminator_type*);
  };

  template <>
  class access::object_traits_impl< ::Produit, id_common >:
    public access::object_traits_impl< ::Produit, id_pgsql >
  {
  };

  // DBViewProduits
  //
  template <>
  class access::view_traits_impl< ::DBViewProduits, id_pgsql >:
    public access::view_traits< ::DBViewProduits >
  {
    public:
    struct image_type
    {
      // produits
      //
      object_traits_impl< ::Produit, id_pgsql >::image_type produits_value;

      std::size_t version;
    };

    typedef pgsql::view_statements<view_type> statements_type;

    typedef pgsql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 12UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);

    static const char query_statement_name[];
  };

  template <>
  class access::view_traits_impl< ::DBViewProduits, id_common >:
    public access::view_traits_impl< ::DBViewProduits, id_pgsql >
  {
  };

  // ViewProduit
  //
  template <>
  class access::view_traits_impl< ::ViewProduit, id_pgsql >:
    public access::view_traits< ::ViewProduit >
  {
    public:
    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // libele
      //
      details::buffer libele_value;
      std::size_t libele_size;
      bool libele_null;

      // codebare
      //
      details::buffer codebare_value;
      std::size_t codebare_size;
      bool codebare_null;

      // prix_achat_moy
      //
      double prix_achat_moy_value;
      bool prix_achat_moy_null;

      // prix_vente
      //
      long long prix_vente_value;
      bool prix_vente_null;

      // remise
      //
      float remise_value;
      bool remise_null;

      // qte_colise
      //
      float qte_colise_value;
      bool qte_colise_null;

      std::size_t version;
    };

    typedef pgsql::view_statements<view_type> statements_type;

    typedef pgsql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 7UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);

    static const char query_statement_name[];
  };

  template <>
  class access::view_traits_impl< ::ViewProduit, id_common >:
    public access::view_traits_impl< ::ViewProduit, id_pgsql >
  {
  };

  // Produit
  //
  template <>
  struct alias_traits<
    ::Produit,
    id_pgsql,
    access::object_traits_impl< ::Produit, id_pgsql >::parent_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::Produit, id_pgsql >
  {
    // parent
    //
    typedef
    odb::alias_traits<
      ::Produit,
      id_pgsql,
      access::object_traits_impl< ::Produit, id_pgsql >::parent_tag>
    parent_alias_;
  };

  template <typename A>
  struct query_columns< ::Produit, id_pgsql, A >:
    query_columns_base< ::Produit, id_pgsql >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // typeid_
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    typeid__type_;

    static const typeid__type_ typeid_;

    // libele
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    libele_type_;

    static const libele_type_ libele;

    // codebare
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    codebare_type_;

    static const codebare_type_ codebare;

    // image_path
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QString,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    image_path_type_;

    static const image_path_type_ image_path;

    // prix_vente
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::quint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    prix_vente_type_;

    static const prix_vente_type_ prix_vente;

    // prix_achat_moy
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::qreal,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    prix_achat_moy_type_;

    static const prix_achat_moy_type_ prix_achat_moy;

    // remise
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    remise_type_;

    static const remise_type_ remise;

    // qte_colise
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    qte_colise_type_;

    static const qte_colise_type_ qte_colise;

    // qte_gros
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::quint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    qte_gros_type_;

    static const qte_gros_type_ qte_gros;

    // qte_details
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::quint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    qte_details_type_;

    static const qte_details_type_ qte_details;

    // parent
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::ulong,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    parent_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::Produit,
        id_pgsql,
        parent_alias_ > >
    parent_pointer_type_;

    struct parent_type_: parent_pointer_type_, parent_column_type_
    {
      parent_type_ (const char* t, const char* c, const char* conv)
        : parent_column_type_ (t, c, conv)
      {
      }
    };

    static const parent_type_ parent;
  };

  template <typename A>
  const typename query_columns< ::Produit, id_pgsql, A >::id_type_
  query_columns< ::Produit, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::Produit, id_pgsql, A >::typeid__type_
  query_columns< ::Produit, id_pgsql, A >::
  typeid_ (A::table_name, "\"typeid\"", 0);

  template <typename A>
  const typename query_columns< ::Produit, id_pgsql, A >::libele_type_
  query_columns< ::Produit, id_pgsql, A >::
  libele (A::table_name, "\"libele\"", 0);

  template <typename A>
  const typename query_columns< ::Produit, id_pgsql, A >::codebare_type_
  query_columns< ::Produit, id_pgsql, A >::
  codebare (A::table_name, "\"codebare\"", 0);

  template <typename A>
  const typename query_columns< ::Produit, id_pgsql, A >::image_path_type_
  query_columns< ::Produit, id_pgsql, A >::
  image_path (A::table_name, "\"image_path\"", 0);

  template <typename A>
  const typename query_columns< ::Produit, id_pgsql, A >::prix_vente_type_
  query_columns< ::Produit, id_pgsql, A >::
  prix_vente (A::table_name, "\"prix_vente\"", 0);

  template <typename A>
  const typename query_columns< ::Produit, id_pgsql, A >::prix_achat_moy_type_
  query_columns< ::Produit, id_pgsql, A >::
  prix_achat_moy (A::table_name, "\"prix_achat_moy\"", 0);

  template <typename A>
  const typename query_columns< ::Produit, id_pgsql, A >::remise_type_
  query_columns< ::Produit, id_pgsql, A >::
  remise (A::table_name, "\"remise\"", 0);

  template <typename A>
  const typename query_columns< ::Produit, id_pgsql, A >::qte_colise_type_
  query_columns< ::Produit, id_pgsql, A >::
  qte_colise (A::table_name, "\"qte_colise\"", 0);

  template <typename A>
  const typename query_columns< ::Produit, id_pgsql, A >::qte_gros_type_
  query_columns< ::Produit, id_pgsql, A >::
  qte_gros (A::table_name, "\"qte_gros\"", 0);

  template <typename A>
  const typename query_columns< ::Produit, id_pgsql, A >::qte_details_type_
  query_columns< ::Produit, id_pgsql, A >::
  qte_details (A::table_name, "\"qte_details\"", 0);

  template <typename A>
  const typename query_columns< ::Produit, id_pgsql, A >::parent_type_
  query_columns< ::Produit, id_pgsql, A >::
  parent (A::table_name, "\"parent\"", 0);

  // DBViewProduits
  //
  struct access::view_traits_impl< ::DBViewProduits, id_pgsql >::query_columns:
    odb::pointer_query_columns<
      ::Produit,
      id_pgsql,
      odb::access::object_traits_impl< ::Produit, id_pgsql > >
  {
  };

  // ViewProduit
  //
  struct access::view_traits_impl< ::ViewProduit, id_pgsql >::query_columns:
    odb::pointer_query_columns<
      ::Produit,
      id_pgsql,
      odb::access::object_traits_impl< ::Produit, id_pgsql > >
  {
  };
}

#include "produit-odb.ixx"

#include <odb/post.hxx>

#endif // PRODUIT_ODB_HXX
