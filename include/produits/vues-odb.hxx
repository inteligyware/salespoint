// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef VUES_ODB_HXX
#define VUES_ODB_HXX

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/pgsql/qstring-traits.hxx>
#include <odb/qt/basic/pgsql/qbyte-array-traits.hxx>
#include <odb/qt/basic/pgsql/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/pgsql/qdate-traits.hxx>
#include <odb/qt/date-time/pgsql/qtime-traits.hxx>
#include <odb/qt/date-time/pgsql/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
#include <QtCore/QSharedPointer>


//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "vues.hxx"

#include "article-odb.hxx"
#include "emballage-odb.hxx"
#include "famille-odb.hxx"
#include "fournisseur-odb.hxx"
#include "histprix-odb.hxx"
#include "medicament-odb.hxx"
#include "prixfourn-odb.hxx"
#include "produit-odb.hxx"
#include "tonnage-odb.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/view-image.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // AViewProduit
  //
  template <>
  struct class_traits< ::AViewProduit >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::AViewProduit >
  {
    public:
    typedef ::AViewProduit view_type;
    typedef ::QSharedPointer< ::AViewProduit > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // AViewProduit
  //
  template <>
  class access::view_traits_impl< ::AViewProduit, id_pgsql >:
    public access::view_traits< ::AViewProduit >
  {
    public:
    struct image_type
    {
      // idp
      //
      long long idp_value;
      bool idp_null;

      // reference
      //
      details::buffer reference_value;
      std::size_t reference_size;
      bool reference_null;

      // libele
      //
      details::buffer libele_value;
      std::size_t libele_size;
      bool libele_null;

      // prix_achat_moy
      //
      double prix_achat_moy_value;
      bool prix_achat_moy_null;

      // remise
      //
      float remise_value;
      bool remise_null;

      // prix_vente
      //
      long long prix_vente_value;
      bool prix_vente_null;

      // qte_unitaire
      //
      float qte_unitaire_value;
      bool qte_unitaire_null;

      // codebare
      //
      details::buffer codebare_value;
      std::size_t codebare_size;
      bool codebare_null;

      // idf
      //
      int idf_value;
      bool idf_null;

      // idpp
      //
      long long idpp_value;
      bool idpp_null;

      // idfp
      //
      int idfp_value;
      bool idfp_null;

      // cip
      //
      details::buffer cip_value;
      std::size_t cip_size;
      bool cip_null;

      // famille
      //
      details::buffer famille_value;
      std::size_t famille_size;
      bool famille_null;

      std::size_t version;
    };

    typedef pgsql::view_statements<view_type> statements_type;

    typedef pgsql::query_base query_base_type;
    struct query_columns
    {
    };

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 13UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);

    static const char query_statement_name[];
  };

  template <>
  class access::view_traits_impl< ::AViewProduit, id_common >:
    public access::view_traits_impl< ::AViewProduit, id_pgsql >
  {
  };
}

#include "vues-odb.ixx"

#include <odb/post.hxx>

#endif // VUES_ODB_HXX
